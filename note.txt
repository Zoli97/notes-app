Fullstack note app using mongodb, express ,react and node.
Start building the api

in the backend i will build the api.
in client i will build the react app

Mongodb the db ->store the data.
Express the web framework ->ready to use toolbox for building web app faster  
Reactr the client library.
Node js the runtime ->run the js on server.

ex)
the first api where i listen to a get req and i handling it propelry
send a request and get a response.


How does a fullstack app work?

client - server (db) req resp lifecycle 
- from the client the user would send a request, delete a post, send the request to the server, so i got the request, now i would to delete it from the db.
- the backend will delete it and send a response back succecss, the post has been deleted and the ui will be updated.

API?

- it allows 2 diff apps talk to each other
- the man in the middle is the api

Real world API

user send a req from the browser to server backend system and get a repsonse back.
end user in the browser i send a request to the endpoint url and i got the response back i got 5 notes.
Can't just get rid of this api man can i just interact with my db from the client?
I cant just access to the db i cant interact with the db from the client.
so i cannot really trust to the client, instead would have a waiter which is someone to trust and only to the things that he want to.

Types of APIS

Rest API 
- it uses http methods
- get rea to fetch my notes

In the backend i listening for the get request under the url just go ahead and send the notes.

HTTP STATUS CODE

201 created i would get 201 from the backend
400 bad request - invalid
401 unauthorized - you must login 
403 - forbidden - not allowed
404 not found - url doesnt exist
5xx - server errors

A route 
that i have , i am listening with a get method under the url, once i got the req i will do something calcualte and send back to the client


ENDPOINT

is a combiantion of http + url taht lets the client interact with a specific resource

app.get("/api/notes", (req, res) => {
  res.status(200).send("iw got 5 notes");
});

app.post("/api/notes", (req, res) => {
  res.status(201).send("Your note has been created successfully ");
});

Optimize 

take every single one of these routes under different folders.
controllers
- take all those prev endpoints and prefix them with /api/notes


COMPARISON SQL - NO SQL

SQL 
- DATA IS STORED IN TABLES WITH ROWS AND COLS.
- strict
- USE SQL LANGUAGE - you use structured queries (SELECT, INSERT)
- FOR COMPLEX QUERIES - a lot of relationships between data like orders and customers

NO SQL
- STORE DATA LIKE JSON OR KEY VALUE PAIRS good for changing data shapes
- flexible
- USE QUERY LANGUAGE OR API - each nosql db has its own way of querying often simpler and faster for certain tasks.
- BIG DATA & REAL TIME APPS - for fast-changing or huge amounts of data


Connection to cluster user and pass

pass - ozArNugLnVdlnfmH
- connect my db from nodejs app

Connection string 
mongodb+srv://zzoli97:ozArNugLnVdlnfmH@cluster0.axqogsa.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

Create models
- for note.
- so every single note has some values like title, descr, createad at 
Use the Note model in other file to interact with notes, create one update 


Controllers

to communicate with db where i can fetch them create them update and delete 
if u want specific one find({})
With postman i can send http req to my endpoint.
now i can send a get req from browser

 resp.status(200).send("You just fetched 20 notes ! ");

Create a note


  // resp
  //   .status(201)
  //   .json({ message: "Your note has been created successfully !" });

- they need to send some body  a title, content.
- get the value form the user?
- access the value it nee dto put in app.use(expreess.json())

  const { title, content } = req.body;
    const newNote = new Note({ title, content });
    await newNote.save();
    resp.status(201).send("Note created successfully ! ");


Update a note

- to update the content ex just get the id and put it into url.
- if the user puts id that doesnt exist

Delete a note same like update

Fetch a specific note

i have built every single controller that i need.
- send the request and get every single note i can sort it.



FRONTEND
so i will be using -1 so on the end result when i create the new note i had like to see in the beginning

Middleware

is just a function that runs in the middle between req and resp.
- so i can send a req from client and i will get a resp back from the server, just before i send the response i can do something in the middle
- send a req just before i send the resp i can put a console.log in the terminal 
app.use((req, resp, next) => {
  console.log("I just got answer req.");
  next();
});
send a req to the endpoint 
- just beofre i send a response and get access to req.body;

Auth check

- the user send a req to create a post but if i m not auth server will check it with middleware fun just before it send me a response it will check if the user is auth, if user is auth they can create a post.

Rate limit

- is a way to control how often someone can do something on a website or app like how many times can refresh a page, make a request to an API, or login
- maliciouis user and non stop would send a request to the endpoint, abuse the api, server might crash it cannot handle it, overload the server.
- block this only send 100 req per user every 15 min.
- status 429 to many req.

 upstash

- bunch of diff services
- will use redis with rate limiting
- is a key value store which will act like a storage.
- now connect from nodejs app
npm i @upstash/ratelimit @upstash/redis
before send a resp back call the middleware
every user will be rate limited specifically.

COnnect to db and then start the app (go ahead listen)



FRONTEND

3 pages.
home page
detail page 
create page

Libraries
Diasy ui 
- this is a tailwind css library.

Axios 
- replace the fetch API with the axios.

Now on the home page i send a lot of reqs once i got rate limited i would like to see the kind of ui error.

Access to fetch at 'http://localhost:2000/api/notes' from origin 'http://localhost:5173' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
- now on the home page i have useeffect that fetch the notes i update the sate 
CORS (CROSS ORIGIN RESOURCE SHARING)
-is browser security rule.
- when a website to get data from another website - like client calling an API on adifferent domain - the browser might block it or security reasons.

client http://localhost:3000
api backend http://api.example.combiantion

the frontend makes a fetch req to get datafetch(http://api.api.exam.com/users) got teh cors error
you are coming from client and you are trying to access the backend api that a different origin, need to make sure the api allows me.
bassically allows me every req from every url.
add specifically the frontend url
- i have the notes coming from db.

once user types in i will like to get the value and update the state.
prefix - dont really need to type out the url every single time whenever send a req to my api.

Delete 

- note delete it success but the ui not been updated.
i will update the setNotes state and filter it and pass in props.

Update

- get the id from url using useparams hook

react-router is the core routing logic (not intended for direct browser use).

react-router-dom includes the DOM bindings for the browser â€” this handles navigation without full page reloads (aka flicker).